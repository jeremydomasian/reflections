Reflect: Using a remote repository

When would you want to use a remote repository rather than keeping all your work local?

Probably all the time; more specifically speaking:
- for collaborating on code with others
- sharing code with an audience
- backing up code in case something happens to your local copies

---

Reflect: Manual vs. automatic pull

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because you might be working on something that isn't yet ready for public viewing yet
or the remote repository must stay working/reliable and so should not take in automatic
updates, otherwise it could pull in non-working code.

---

Reflect: Forks, Clones, and Branches

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are GitHub-exclusive clones. Forking takes someone's repository that is hosted on GitHub and clones it,
so that you have your own personal repository that you can make changes to without affecting the original
repository that you forked from. i.e., remote-to-remote

Clones are exact copies of a repository. Cloning means taking all of the commits, descending from the
latest commit to each subsequent parent, and copying it to another location, whether it's from local-to-local
or remote-to-local. Local-to-remote is called "pushing."

Branches are labels and checkpoints for special commits. They represent a new version, variation, experimental
feature, or otherwise logical set of changes that you want to keep separate from the master branch.

---

Reflect: Local copies of remote branches

What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit of having a copy of the last known state of the remote stored locally is:
that you're able to merge commits to that copy of the remote locally first
in case you won't be able to reach the remote for an extended period of time.

---

Reflect: Collaboration using Git and GitHub

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Probably emailing files back and forth. Git and GitHUb are definitely easier and make things
so much more ideal when collaborating together.

---

Reflect: When to use a separate branch

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

To work on a separate feature or other goal that should not interrupt the current code that is in
the master branch. 

Benefits of separate branch:
- Keeps track of changes in its own branch
- Allows for experimentation by separating the code out into its own branch

Benefits of direct-to-master:
- See the results immediately
- Less complexity and having to deal with merge conflicts

---

Reflect: 
