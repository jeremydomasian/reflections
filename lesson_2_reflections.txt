Reflect: Initializing a Repository

What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, you're telling Git to get ready to start tracking commits.
You're creating the hidden .git directory, which is where all of the file history and changes will be saved.

---

Reflect: Staging Area

How is the staging area different from the working directory and the repository? What value do you think it offers?

It's different in that it is the platform or "stage" that is used between the working directory and the repository.
It is the go-to, transitionary platform that allows you to pick and choose what files you want to commit.
It's valuable in that you're able to pick and choose what files you'd like to include in your commit,
thus granting even more flexibility and power to the user.

---

Reflect: Commit Size

How can you use the staging area to make sure you have one commit per logical change?

I an use the staging area to make sure I have one commit per logical change by only staging the files
that are involved in the single logical change I want to commit.

---

Reflect: When to Use Branches

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Making a new version of something, or working on an experimental feature, or any situation where
you want to "branch" off into another line of work while still working alongside a "master" branch.
Branches would help by allowing you to work separately from the "master" branch, which typically
is the branch of code that works and is the main branch where deployment happens, and allows you to merge
when ready or necessary.

---

Reflect: Visualizing with Diagrams

How do the diagrams help you visualize the branch structure?

The diagrams help me visualize the branch structure by giving me a simplified, illustrated way
of viewing how Git and branches work. They also help me understand the relationships between
different commits and branches and the effect that certain commands such as 'git checkout'
and 'git branch' have on the history and 'reachability' of certain commits.

---

Reflect: Merging Two Branches

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is one branch combining with another, with the 'master' branch
typically "absorbing" the other branch and continuing on its merry way. We represent it the way we do
in the diagram because all of the changes that took place in the other branch is combined or 'merged' into
the master branch.

---

Reflect: 
